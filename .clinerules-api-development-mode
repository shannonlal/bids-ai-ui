# Rules specific to API Development Mode

1. Code Quality and Linting:

   - All new API code MUST pass ESLint checks without warnings or errors.
   - Code MUST be formatted with Prettier to maintain consistent code style.
   - Run `pnpm lint` and `pnpm format` before attempting completion to ensure code quality.
   - Address all linting and formatting issues before proceeding with the task.

2. Testing Requirements:

   - All new API endpoints and services MUST have corresponding unit tests.
   - Aim for high test coverage to ensure the reliability of APIs.
   - Use Vitest for writing unit tests and place test files alongside the corresponding source files in `src/pages/api/__tests__` or `src/services/__tests__` directories.
   - Ensure tests cover various scenarios, including success cases, error cases, and edge cases, as demonstrated in the following examples:
     - [Unit Test Example for Answer Service](./cline_docs/features/api-development/unit-test-examples/good_answerService.test.md)
     - [Unit Test Example for User Service](./cline_docs/features/api-development/unit-test-examples/good_userService.test.md)
   - Follow the testing patterns shown in the examples, including using `describe` and `it` blocks, `vi.mock` for mocking dependencies, and `expect` for assertions.
   - Prioritize testing error handling and edge cases to ensure API robustness.
   - All new and existing tests must pass before attempting completion.
   - When modifying existing APIs, update or add tests as needed to reflect the changes and maintain test coverage.

3. API Design Best Practices:

   - Follow RESTful API design principles.
   - Use clear and concise endpoint names and HTTP methods.
   - Implement proper input validation and sanitization to prevent security vulnerabilities.
   - Implement robust error handling and return informative error responses to the client.
   - Design APIs for optimal performance and scalability.
   - Document API endpoints, request/response formats, and authentication/authorization mechanisms using comments or dedicated documentation files.

4. MongoDB Integration:

   - Use Mongoose models to interact with MongoDB. Define schemas that accurately represent the data structure and relationships.
   - Optimize database queries for performance. Use indexing strategy and aggregation pipelines where appropriate.
   - Implement connection pooling and error handling for MongoDB interactions.

5. External API Integration:

   - Document the purpose, usage, and authentication methods of any external APIs used in the code.
   - Handle API responses and errors appropriately. Implement retry mechanisms and fallback strategies for unreliable external APIs.
   - Transform and map external API data to the Bids AI platform's data models and formats as needed.

6. Code Organization and Style:

   - Maintain the existing directory structure of the `bids-ai` project. Group related files logically within appropriate directories.
   - Keep API route handlers lean and focused on request/response handling. Move business logic and data access code to service layers.
   - Organize models and types in dedicated directories (`src/models/`, `src/types/`).
   - Follow consistent naming conventions for routes, functions, variables, and models.
   - Write clean, well-commented, and maintainable code.

7. Security:
   - Handle API keys and authentication tokens securely. Do not hardcode sensitive information in the codebase. Use environment variables to manage API keys and secrets.
   - Implement proper authorization and authentication mechanisms for protected API routes, especially for routes that handle sensitive data or modify data.
   - Sanitize user inputs to prevent common security vulnerabilities such as injection attacks.
