# Rules specific to API Development Mode

1. Code Quality and Linting:

   - All new API code MUST pass ESLint checks without warnings or errors.
   - Code MUST be formatted with Prettier to maintain consistent code style.
   - Run `pnpm lint` and `pnpm format` before attempting completion to ensure code quality.
   - Address all linting and formatting issues before proceeding with the task.

2. Testing Requirements:

   - All new API endpoints and services MUST have comprehensive unit tests.
   - Aim for high test coverage (>90%) to ensure the reliability of APIs.
   - Use Vitest for writing unit tests and place test files alongside the corresponding source files.
   - Test Coverage Criteria:
     - Success scenarios
     - Error scenarios
     - Edge cases
     - Input validation
     - Boundary conditions

3. Error Handling and Validation:

   - Implement robust error handling in all API endpoints and services
   - Create custom error classes for different error types
   - Validate and sanitize all input data
   - Return consistent, informative error responses
   - Include error codes and descriptive messages
   - Prevent potential security vulnerabilities through thorough input validation

4. API Design Best Practices:

   - Follow RESTful API design principles
   - Use clear, descriptive endpoint names and HTTP methods
   - Implement proper input validation and sanitization
   - Design for performance, scalability, and security
   - Document API endpoints, request/response formats, and authentication mechanisms

5. Mocking and Testing Strategies:

   - Use comprehensive mocking for external dependencies
   - Create mock data factories for consistent test data generation
   - Test both happy paths and error scenarios
   - Ensure tests cover various input conditions and potential failure modes

6. Security Considerations:

   - Implement strong input validation
   - Use environment-based configuration for security settings
   - Add rate limiting for sensitive endpoints
   - Protect against common security vulnerabilities
   - Sanitize and validate all user inputs

7. Code Organization:

   - Keep route handlers lean and focused
   - Move complex logic to service layers
   - Maintain clean, well-commented, and modular code
   - Follow consistent naming conventions
   - Organize related files logically

8. Performance and Optimization:

   - Optimize database queries
   - Implement efficient error handling
   - Use indexing and aggregation strategies
   - Minimize unnecessary computations
   - Consider caching strategies for frequently accessed data

9. Continuous Improvement:
   - Regularly review and refactor code
   - Update tests to maintain high coverage
   - Stay informed about best practices and security updates
   - Conduct code reviews to ensure quality and consistency

Example Test Coverage Checklist:

- [x] Successful operations
- [x] Error scenarios
- [x] Input validation
- [x] Edge cases
- [x] Boundary conditions
- [x] Security checks
- [x] Performance considerations

Recommended Tools:

- Vitest for unit testing
- ESLint for code quality
- Prettier for code formatting
- TypeScript for type safety
